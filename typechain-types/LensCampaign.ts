/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace DataTypes {
  export type MirrorDataStruct = {
    profileId: BigNumberish;
    profileIdPointed: BigNumberish;
    pubIdPointed: BigNumberish;
    referenceModuleData: BytesLike;
    referenceModule: string;
    referenceModuleInitData: BytesLike;
  };

  export type MirrorDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    profileId: BigNumber;
    profileIdPointed: BigNumber;
    pubIdPointed: BigNumber;
    referenceModuleData: string;
    referenceModule: string;
    referenceModuleInitData: string;
  };
}

export interface LensCampaignInterface extends utils.Interface {
  functions: {
    "lensHub()": FunctionFragment;
    "lensHubAddress()": FunctionFragment;
    "mirrorWrapper((uint256,uint256,uint256,bytes,address,bytes))": FunctionFragment;
    "owner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "lensHub"
      | "lensHubAddress"
      | "mirrorWrapper"
      | "owner"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "lensHub", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lensHubAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorWrapper",
    values: [DataTypes.MirrorDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "lensHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lensHubAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mirrorWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {};
}

export interface LensCampaign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LensCampaignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lensHub(overrides?: CallOverrides): Promise<[string]>;

    lensHubAddress(overrides?: CallOverrides): Promise<[string]>;

    mirrorWrapper(
      vars: DataTypes.MirrorDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  lensHub(overrides?: CallOverrides): Promise<string>;

  lensHubAddress(overrides?: CallOverrides): Promise<string>;

  mirrorWrapper(
    vars: DataTypes.MirrorDataStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    lensHub(overrides?: CallOverrides): Promise<string>;

    lensHubAddress(overrides?: CallOverrides): Promise<string>;

    mirrorWrapper(
      vars: DataTypes.MirrorDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    lensHub(overrides?: CallOverrides): Promise<BigNumber>;

    lensHubAddress(overrides?: CallOverrides): Promise<BigNumber>;

    mirrorWrapper(
      vars: DataTypes.MirrorDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    lensHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lensHubAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mirrorWrapper(
      vars: DataTypes.MirrorDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
