/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LensCampaign, LensCampaignInterface } from "../LensCampaign";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "_asset",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "lensHub",
    outputs: [
      {
        internalType: "contract ILensHub",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lensHubAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "profileId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "profileIdPointed",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pubIdPointed",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "referenceModuleData",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "referenceModule",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "referenceModuleInitData",
            type: "bytes",
          },
        ],
        internalType: "struct DataTypes.MirrorData",
        name: "vars",
        type: "tuple",
      },
    ],
    name: "mirrorWrapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405273db46d1dc155634fbc732f92e853b10b288ad5a1d60805234801561002857600080fd5b5060405161038d38038061038d8339810160408190526100479161005f565b50600080546001600160a01b0319163317905561008f565b60006020828403121561007157600080fd5b81516001600160a01b038116811461008857600080fd5b9392505050565b6080516102e46100a96000396000606b01526102e46000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316e43ffc146100515780635dfadbdb146100665780638da5cb5b146100a9578063b02cfdc3146100bc575b600080fd5b61006461005f366004610146565b6100cf565b005b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b60005461008d906001600160a01b031681565b60015461008d906001600160a01b031681565b600154604051632faeed8160e01b81526001600160a01b0390911690632faeed81906100ff9084906004016101fe565b6020604051808303816000875af115801561011e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101429190610295565b5050565b60006020828403121561015857600080fd5b813567ffffffffffffffff81111561016f57600080fd5b820160c0818503121561018157600080fd5b9392505050565b6000808335601e1984360301811261019f57600080fd5b830160208101925035905067ffffffffffffffff8111156101bf57600080fd5b8036038313156101ce57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60208152813560208201526020820135604082015260408201356060820152600061022c6060840184610188565b60c0608085015261024160e0850182846101d5565b91505060808401356001600160a01b03811680821461025f57600080fd5b8060a0860152505061027460a0850185610188565b848303601f190160c086015261028b8382846101d5565b9695505050505050565b6000602082840312156102a757600080fd5b505191905056fea2646970667358221220b67755552eb0eaecca1315af33a38062d47629921b1f8bdcdb326f066f83dc2d64736f6c634300080a0033";

type LensCampaignConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LensCampaignConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LensCampaign__factory extends ContractFactory {
  constructor(...args: LensCampaignConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LensCampaign> {
    return super.deploy(_asset, overrides || {}) as Promise<LensCampaign>;
  }
  override getDeployTransaction(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_asset, overrides || {});
  }
  override attach(address: string): LensCampaign {
    return super.attach(address) as LensCampaign;
  }
  override connect(signer: Signer): LensCampaign__factory {
    return super.connect(signer) as LensCampaign__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LensCampaignInterface {
    return new utils.Interface(_abi) as LensCampaignInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LensCampaign {
    return new Contract(address, _abi, signerOrProvider) as LensCampaign;
  }
}
